#include <stdio.h>


int main() {
    int n, m, i, j,k; // n - no of processes, m - no of resources
    printf("Enter the no of processes: ");
    scanf("%d", &n);
    printf("Enter the no of resources: ");
    scanf("%d", &m);
    
    int instance[m];
    for (i = 0; i < m; i++) {
        printf("Enter the total no of instances of resource %d: ", i + 1);
        scanf("%d", &instance[i]);
    }
    
    int allocation[n][m], max[n][m], need[n][m], available[m];
    
    // Allocation matrix
    printf("Enter the allocation matrix:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
        }
    }
    
    // Max matrix
    printf("Enter the max matrix representing the maximum resource instances needed by each process:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            scanf("%d", &max[i][j]);
        }
    }
    
    // Finding the available matrix
    for (i = 0; i < m; i++) {
        int sum = 0;
        for (j = 0; j < n; j++) {
            sum += allocation[j][i];
        }
        available[i] = instance[i] - sum;
    }
    
    // Finding the need matrix
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            need[i][j] = max[i][j] - allocation[i][j];
        }
    }
    
    printf("\n-----NEED MATRIX------\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < m; j++) {
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }
    
    printf("\n-----AVAILABLE MATRIX------\n");
    for (i = 0; i < m; i++) {
        printf("%d ", available[i]);
    }
    printf("\n");

    //safety algorithm
    int work[m],finish[n],completed=0,p,q,r,u=0,safeseq[n];
    //initialising work std::vector<T> ;
    for(i=0;i<m;i++)
    {
        work[i]=available[i];
    }
    //initialising finish vector
    for(j=0;j<n;j++)
    {
        finish[j]=0;
    }
    while(completed<n)
    {
        for(p=0;p<n;p++)
        {
            if(finish[p]==0)
            {
                //work and need
                for(j=0;j<m;j++)
                {
                    if(need[p][j]>work[j])
                    {
                        break;
                    }
                }
                if(j==m)
                {
                    for(i=0;i<m;i++)
                    {
                        work[i]=work[i]+allocation[p][i];
                        
                    }
                        finish[p]=1;
                        completed++;
                        safeseq[u]=p;
                        u++;
                }
            }
        }
    }
    printf("SAFESEQUENCE:");
    for(i=0;i<n;i++)
    {
        printf("P%d\t",safeseq[i]);
    }
    
    //resource request algorithm
    int y,pid,request[m],canallo=1;
    printf("Does any process want extra resource(1/0):");
    scanf("%d",&y);
    if(y==1)
    {
        printf("Enter the id of the process:");
        scanf("%d",&pid);
        printf("Enter the request of resources:");
        for(q=0;q<m;q++)
        {
            scanf("%d",&request[q]);
        }
        //checking if the request can be allocated or not
        for(k=0;k<m;k++)
        {
            if(request[k]>need[pid][k]||request[k]>available[k])
            {
                canallo=0;
                break;
            }
        }
        if(canallo==1)
        {
            for(i=0;i<m;i++)
            {
                allocation[pid][i]=allocation[pid][i]+request[i];
                available[i]=available[i]-request[i];
                need[pid][i]=need[pid][i]-request[i];
            }
            //implementing safety algorithm
            
             int work[m],finish[n],completed=0,p,q,r,u=0,safeseq1[n];
    //initialising work std::vector<T> ;
    for(i=0;i<m;i++)
    {
        work[i]=available[i];
    }
    //initialising finish vector
    for(j=0;j<n;j++)
    {
        finish[j]=0;
    }
    while(completed<n)
    {
        for(p=0;p<n;p++)
        {
            if(finish[p]==0)
            {
                //work and need
                for(j=0;j<m;j++)
                {
                    if(need[p][j]>work[j])
                    {
                        break;
                    }
                }
                if(j==m)
                {
                    for(i=0;i<m;i++)
                    {
                        work[i]=work[i]+allocation[p][i];
                        
                    }
                        finish[p]=1;
                        completed++;
                        safeseq1[u]=p;
                        u++;
                }
            }
        }
    }
    printf("SAFESEQUENCE:");
    for(i=0;i<n;i++)
    {
        printf("P%d\t",safeseq1[i]);
    }
            
        }
        
    }

    return 0;
}

